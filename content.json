[{"title":"GCD(最大公约数)-LCM（最小公倍数）","date":"2017-01-11T11:07:57.000Z","path":"2017/01/11/GCD_LMD/","text":"最大公约数和最小公倍数 最大公约数算法描述： 古希腊数学家欧几里得(公元前330年—公元前275年)发明了一种巧妙的算法——辗转相除法,又称欧几里得算法:令较大数为m,较小数为n; 当m除以n的余数不等于0时,把n作为m,并把余数作为n,进行下一次循环; 当余数等于0时,返回n 123456789101112131415161718192021#include &lt;stdio.h&gt;int gcd(int i, int j)&#123; int temp = i%j; if (temp==0) &#123; return j; &#125; else&#123; return gcd(j, temp); &#125;&#125;int main() &#123; int a, b; while (scanf(\"%d%d\", &amp;a, &amp;b)!=0) &#123; printf(\"%d\\n\", gcd(a, b)); &#125; return 0;&#125; . 算法分析 key value 测试输入 m=100,n=44 测试输出 4 时间复杂度 O(N) 空间复杂度 O(N) 每执行一次循环,m或者n至少有一个缩小了2倍,故时间复杂度上限为log2M。 对于大量的随机测试样例,每次循环平均能使m与n的值缩小一个10进位,所以平 均复杂度为O(lgM)。","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"},{"name":"递归算法","slug":"递归算法","permalink":"http://yoursite.com/tags/递归算法/"}]},{"title":"My First Post","date":"2017-01-11T05:45:40.000Z","path":"2017/01/11/My-First-Post/","text":"","tags":[{"name":"test","slug":"test","permalink":"http://yoursite.com/tags/test/"},{"name":"杂物","slug":"杂物","permalink":"http://yoursite.com/tags/杂物/"}]},{"title":"Hello World","date":"2017-01-10T10:22:10.000Z","path":"2017/01/10/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]